// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 0001_initial.down.sql (18B)
// 0001_initial.up.sql (439B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xca\xcf\xcf\x2d\xb6\xe6\x02\x04\x00\x00\xff\xff\xc9\xaf\xf3\x74\x12\x00\x00\x00")

func _0001_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialDownSql,
		"0001_initial.down.sql",
	)
}

func _0001_initialDownSql() (*asset, error) {
	bytes, err := _0001_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.down.sql", size: 18, mode: os.FileMode(0644), modTime: time.Unix(1607106242, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xc5, 0xbe, 0xff, 0x50, 0x34, 0x9c, 0xaf, 0x4c, 0x23, 0x1b, 0xa2, 0x7e, 0x9f, 0x39, 0x7f, 0xf, 0x6d, 0x6, 0x87, 0x87, 0x94, 0xcc, 0x3b, 0x7d, 0xbd, 0xa8, 0x35, 0xc9, 0x37, 0x56, 0x5f, 0x5c}}
	return a, nil
}

var __0001_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\xff\xd6\x16\xfa\x06\x9e\x62\x1b\x35\xd8\xcd\x8a\x4e\xd1\x5b\x19\x76\x82\xf4\xd0\xa4\xa4\x29\xbe\xbe\xac\x0b\x85\x55\x2f\xdd\x53\x20\xff\xc7\x3f\x33\x5f\xf3\x6a\x34\x19\x90\xbe\xef\x0c\x52\x8c\xd3\x82\x52\x01\xa3\xa0\xef\x6d\x0b\x77\x24\xb8\xbe\xeb\xd0\x9a\x07\xdd\x77\x84\x4f\x1f\x86\xc4\x41\xe2\x34\xac\xeb\x28\x65\x55\x2b\xe0\x14\xc5\x83\xcc\x07\x6d\xfc\xcf\x6f\xf2\x9c\xbd\x0c\x9c\x41\xf6\x60\xde\x48\x1f\x5e\xfe\x16\x86\xf8\x75\x29\x59\x67\xd9\x83\x2f\x99\xf3\xaf\xa1\x1b\x54\xbc\x6b\x4b\xd6\x3d\x16\x68\x9e\x4c\xf3\x8c\xf2\x02\x5b\x87\x72\x8b\x6a\x14\xed\xd1\x99\xf3\x5b\x54\x55\xad\xaa\x3b\xa5\xae\x64\xcc\x9c\xf2\x78\x1a\x67\x0e\xf9\x26\x27\xfb\xae\x0f\x3c\xfd\xa3\x90\x45\x92\x5f\x96\xeb\xe0\xbc\xea\x77\x00\x00\x00\xff\xff\x84\x50\x0e\x8d\xb7\x01\x00\x00")

func _0001_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialUpSql,
		"0001_initial.up.sql",
	)
}

func _0001_initialUpSql() (*asset, error) {
	bytes, err := _0001_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.up.sql", size: 439, mode: os.FileMode(0644), modTime: time.Unix(1607180194, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd8, 0xd3, 0x9, 0xd8, 0x35, 0xdc, 0x73, 0x69, 0xc8, 0xed, 0x11, 0x23, 0xc6, 0xb1, 0xdb, 0x2, 0x58, 0xde, 0xde, 0x32, 0x82, 0x32, 0x73, 0x44, 0xf0, 0x59, 0xbe, 0x6e, 0xf9, 0x7b, 0xdf, 0xc}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_initial.down.sql": _0001_initialDownSql,
	"0001_initial.up.sql":   _0001_initialUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_initial.down.sql": {_0001_initialDownSql, map[string]*bintree{}},
	"0001_initial.up.sql":   {_0001_initialUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
