// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 0001_initial.down.sql (43B)
// 0001_initial.up.sql (438B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __0001_initialDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\x28\xca\xcf\xcf\x2d\xb6\xe6\x42\x12\x29\x48\x2c\x2a\xc9\x4c\xce\x2c\x48\xcc\x2b\x29\xb6\xe6\x02\x04\x00\x00\xff\xff\xc7\x4b\x95\x58\x2b\x00\x00\x00")

func _0001_initialDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialDownSql,
		"0001_initial.down.sql",
	)
}

func _0001_initialDownSql() (*asset, error) {
	bytes, err := _0001_initialDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.down.sql", size: 43, mode: os.FileMode(0644), modTime: time.Unix(1607225082, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0x10, 0xa8, 0xbe, 0x38, 0xc8, 0xc9, 0xaf, 0xde, 0xcc, 0xf2, 0x4d, 0x3a, 0x43, 0xb0, 0x3e, 0xe, 0xd1, 0x50, 0x46, 0x7a, 0x32, 0x7f, 0xe, 0xe1, 0x23, 0xce, 0x12, 0xea, 0xfb, 0xd1, 0x50}}
	return a, nil
}

var __0001_initialUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\xc1\x4a\xc4\x30\x10\x86\xef\x79\x8a\xff\xd6\x16\xf6\x0d\x3c\xc5\x36\x6a\xb0\x9b\x15\x9d\xa2\xb7\x32\xec\x04\xe9\xa1\x49\x49\x52\x7c\x7d\x59\x17\x0a\xab\x5e\x76\x4f\x81\xfc\x1f\xff\xcc\x7c\xed\xab\xd1\x64\x40\xfa\xbe\x37\x48\x31\xce\x19\xb5\x02\x26\xc1\x30\xd8\x0e\xee\x40\x70\x43\xdf\xa3\x33\x0f\x7a\xe8\x09\x9f\x3e\x8c\x89\x83\xc4\x79\x5c\xd7\x49\xea\x66\xa7\x80\x63\x14\x0f\x32\x1f\xb4\xf1\x3f\xbf\xc9\x73\xf1\x32\x72\x01\xd9\xbd\x79\x23\xbd\x7f\xf9\x5b\x18\xe2\xd7\xb9\x64\x5d\xe4\x1a\x3c\x17\x2e\xbf\x86\x6e\x50\xf5\xae\x2d\x59\xf7\x58\xa1\x7d\x32\xed\x33\xea\x33\x6c\x1d\xea\x2d\xda\xa1\xea\x0e\xce\x9c\xde\xaa\x69\x54\x73\xa7\xd4\x85\x8b\x85\x53\x99\x8e\xd3\xc2\xa1\xdc\xa4\xe4\xba\xe3\x03\xcf\xff\x18\x64\x91\xe4\x73\xbe\x0c\x4e\xab\x7e\x07\x00\x00\xff\xff\xf7\xd2\x2e\xf7\xb6\x01\x00\x00")

func _0001_initialUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__0001_initialUpSql,
		"0001_initial.up.sql",
	)
}

func _0001_initialUpSql() (*asset, error) {
	bytes, err := _0001_initialUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "0001_initial.up.sql", size: 438, mode: os.FileMode(0644), modTime: time.Unix(1607225158, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf9, 0x4c, 0x13, 0xe2, 0xd2, 0x55, 0x24, 0x6a, 0x51, 0xd8, 0xe7, 0x8b, 0xc, 0x55, 0xa4, 0x96, 0xcf, 0xdd, 0x0, 0xda, 0x0, 0xdd, 0x8e, 0x95, 0x10, 0x90, 0xc2, 0x86, 0xf5, 0x58, 0x7e, 0x8a}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"0001_initial.down.sql": _0001_initialDownSql,
	"0001_initial.up.sql":   _0001_initialUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"0001_initial.down.sql": {_0001_initialDownSql, map[string]*bintree{}},
	"0001_initial.up.sql":   {_0001_initialUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
